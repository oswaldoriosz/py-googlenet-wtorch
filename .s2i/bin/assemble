#!/bin/bash
set -e

# Version 2.9-fallback
# Directorio de trabajo
cd /tmp/src

# Verificar si g++, wget, python3 y file están instalados
if ! command -v g++ &> /dev/null; then
    echo "Error: g++ no está instalado"
    exit 1
fi
if ! command -v wget &> /dev/null; then
    echo "Error: wget no está instalado"
    exit 1
fi
if ! command -v python3 &> /dev/null; then
    echo "Error: python3 no está instalado"
    exit 1
fi
if ! command -v file &> /dev/null; then
    echo "Error: file no está instalado"
    exit 1
fi

# Crear directorios temporales
mkdir -p /tmp/libtorch /tmp/wheels /tmp/data

# Descargar libtorch.zip desde Google Drive
echo "Descargando libtorch.zip desde Google Drive..."
wget -O /tmp/libtorch.zip "https://drive.google.com/uc?export=download&id=19R2wgwkuK_FcAGmpx6GmlCMx_SeGSRX5" || { echo "Error: No se pudo descargar libtorch.zip"; exit 1; }

# Validar que libtorch.zip es un archivo zip
echo "Validando libtorch.zip..."
if ! file /tmp/libtorch.zip | grep -q "Zip archive"; then
    echo "Error: libtorch.zip no es un archivo zip válido"
    cat /tmp/libtorch.zip | head -n 10
    exit 1
fi

# Descomprimir libtorch.zip usando Python
echo "Descomprimiendo libtorch.zip con Python..."
python3 - <<EOF || { echo "Error: No se pudo descomprimir libtorch.zip"; exit 1; }
import zipfile
import os
with zipfile.ZipFile('/tmp/libtorch.zip', 'r') as zip_ref:
    zip_ref.extractall('/tmp/libtorch')
os.remove('/tmp/libtorch.zip')
EOF

# Verificar libtorch
echo "Verificando contenido de libtorch..."
ls -lh /tmp/libtorch/lib /tmp/libtorch/include/torch || { echo "Error: No se pudo listar /tmp/libtorch"; exit 1; }
if [ ! -f "/tmp/libtorch/include/torch/script.h" ]; then
    echo "Error: torch/script.h no se encuentra en /tmp/libtorch/include/torch"
    ls -la /tmp/libtorch/include/torch
    exit 1
fi
if [ ! -f "/tmp/libtorch/lib/libtorch.so" ]; then
    echo "Error: libtorch.so no se encuentra en /tmp/libtorch/lib"
    ls -la /tmp/libtorch/lib
    exit 1
fi

# Descargar wheels.zip desde Google Drive
echo "Descargando wheels.zip desde Google Drive..."
wget -O /tmp/wheels.zip "https://drive.google.com/uc?export=download&id=147OfftZKzGFBsTyh_wDFZ4C1PkMTv05E" || { echo "Error: No se pudo descargar wheels.zip"; exit 1; }

# Validar que wheels.zip es un archivo zip
echo "Validando wheels.zip..."
if ! file /tmp/wheels.zip | grep -q "Zip archive"; then
    echo "Error: wheels.zip no es un archivo zip válido"
    cat /tmp/wheels.zip | head -n 10
    exit 1
fi

# Descomprimir wheels.zip usando Python
echo "Descomprimiendo wheels.zip con Python..."
python3 - <<EOF || { echo "Error: No se pudo descomprimir wheels.zip"; exit 1; }
import zipfile
import os
with zipfile.ZipFile('/tmp/wheels.zip', 'r') as zip_ref:
    zip_ref.extractall('/tmp/wheels')
os.remove('/tmp/wheels.zip')
EOF

# Verificar wheels
echo "Verificando directorio de wheels..."
ls -lh /tmp/wheels || { echo "Error: No se pudo listar /tmp/wheels"; exit 1; }
if [ ! -f "/tmp/wheels/fastapi-0.115.0-py3-none-any.whl" ]; then
    echo "Error: fastapi-0.115.0-py3-none-any.whl no está en /tmp/wheels"
    ls -la /tmp/wheels
    exit 1
fi

# Descargar googlenet.pt e imagenet_classes.txt desde Google Drive (fallback)
echo "Descargando googlenet.pt e imagenet_classes.txt desde Google Drive..."
wget -O /tmp/data/googlenet.pt "https://drive.google.com/uc?export=download&id=GOOGLENET_PT_FILE_ID" || { echo "Error: No se pudo descargar googlenet.pt"; exit 1; }
wget -O /tmp/data/imagenet_classes.txt "https://drive.google.com/uc?export=download&id=IMAGENET_TXT_FILE_ID" || { echo "Error: No se pudo descargar imagenet_classes.txt"; exit 1; }

# Verificar archivos de datos
echo "Verificando archivos de datos..."
ls -lh /tmp/data || { echo "Error: No se pudo listar /tmp/data"; exit 1; }
if [ ! -f "/tmp/data/googlenet.pt" ] || [ ! -f "/tmp/data/imagenet_classes.txt" ]; then
    echo "Error: googlenet.pt o imagenet_classes.txt no están en /tmp/data"
    exit 1
fi

# Instalar dependencias de Python desde los wheels
echo "Instalando dependencias desde /tmp/wheels..."
pip install --no-index --find-links /tmp/wheels \
    fastapi==0.115.0 \
    uvicorn==0.30.6 \
    torch==2.4.1 \
    torchvision==0.19.1 \
    Pillow==10.4.0 \
    matplotlib==3.9.2 \
    pybind11==2.13.6 \
    python-multipart==0.0.9

# Compilar el módulo C++ usando libtorch
echo "Compilando googlenet.so..."
g++ -shared -fPIC -o googlenet.so main.cpp \
    -I/opt/app-root/lib64/python3.12/site-packages/pybind11/include \
    -I/tmp/libtorch/include \
    -I/tmp/libtorch/include/torch/csrc/api/include \
    -L/tmp/libtorch/lib \
    -ltorch -ltorch_cpu -lc10 \
    -std=c++17 \
    -Wl,-rpath,/opt/app-root/src/libtorch/lib

# Copiar los archivos necesarios al directorio de runtime
echo "Copiando archivos al directorio de runtime..."
mkdir -p /opt/app-root/src/data /opt/app-root/src/libtorch
cp googlenet.so main.py /opt/app-root/src/
cp /tmp/data/googlenet.pt /opt/app-root/src/data/
cp /tmp/data/imagenet_classes.txt /opt/app-root/src/data/
cp -r /tmp/libtorch/* /opt/app-root/src/libtorch/

# Configurar permisos
echo "Configurando permisos..."
chown -R 1001:0 /opt/app-root/src
chmod +x /opt/app-root/src/main.py
echo "Assemble completado exitosamente."
