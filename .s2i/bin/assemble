#!/bin/bash
set -e
set -x  # Enable debug output

# Version 2.20

# Ensure required commands are available
command -v g++ >/dev/null 2>&1 || { echo "g++ is not installed"; exit 1; }
command -v python3 >/dev/null 2>&1 || { echo "python3 is not installed"; exit 1; }
command -v file >/dev/null 2>&1 || { echo "file is not installed"; exit 1; }

# Check for Python.h to verify python3-devel is installed
if [ ! -f "/usr/include/python3.12/Python.h" ]; then
    echo "Error: Python.h not found. Ensure python3-devel is installed in the builder image."
    echo "Please use a custom builder image with python3-devel, gcc, gcc-c++, and make pre-installed."
    exit 1
fi

# Change to source directory
cd /tmp/src

# List contents of /tmp/src for debugging
echo "Contenido de /tmp/src:"
ls -la /tmp/src

# Copy Python files to /opt/app-root/src
echo "Copiando archivos .py a /opt/app-root/src/"
cp -v /tmp/src/*.py /opt/app-root/src/ || echo "No se encontraron archivos .py en /tmp/src"

# Copy requirements.txt if exists
if [ -f /tmp/src/requirements.txt ]; then
    echo "Copiando requirements.txt a /opt/app-root/src/"
    cp -v /tmp/src/requirements.txt /opt/app-root/src/
fi

# Create directories for libtorch and wheels
mkdir -p /tmp/libtorch /tmp/wheels

# Verify libtorch parts
echo "Verificando partes de libtorch-cxx11-abi-shared-with-deps-2.4.1+cpu.zip..."
for part in partaa partab partac partad partae; do
    if [ ! -f "/tmp/src/lib/libtorch-cxx11-abi-shared-with-deps-2.4.1+cpu.zip.$part" ]; then
        echo "Missing libtorch part: $part"
        exit 1
    fi
done

# Combine libtorch parts
echo "Combinando partes de libtorch-cxx11-abi-shared-with-deps-2.4.1+cpu.zip..."
cat /tmp/src/lib/libtorch-cxx11-abi-shared-with-deps-2.4.1+cpu.zip.part* > /tmp/libtorch-cxx11-abi-shared-with-deps-2.4.1+cpu.zip

# Validate libtorch zip
echo "Validando libtorch-cxx11-abi-shared-with-deps-2.4.1+cpu.zip..."
if ! file /tmp/libtorch-cxx11-abi-shared-with-deps-2.4.1+cpu.zip | grep -q 'Zip archive'; then
    echo "Invalid libtorch zip file"
    exit 1
fi

# Extract libtorch
echo "Descomprimiendo libtorch-cxx11-abi-shared-with-deps-2.4.1+cpu.zip..."
python3 - <<EOF
import zipfile
import os
os.makedirs('/tmp/libtorch', exist_ok=True)
with zipfile.ZipFile('/tmp/libtorch-cxx11-abi-shared-with-deps-2.4.1+cpu.zip', 'r') as zip_ref:
    zip_ref.extractall('/tmp/libtorch')
EOF

# Verify torch/script.h
echo "Verificando torch/script.h..."
if [ ! -f "/tmp/libtorch/libtorch/include/torch/script.h" ]; then
    echo "Error: torch/script.h not found in libtorch archive"
    exit 1
fi

# List libtorch contents
echo "Listando contenido de libtorch-cxx11-abi-shared-with-deps-2.4.1+cpu.zip..."
python3 - <<EOF
import zipfile
with zipfile.ZipFile('/tmp/libtorch-cxx11-abi-shared-with-deps-2.4.1+cpu.zip', 'r') as zip_ref:
    for file in zip_ref.namelist():
        print(file)
EOF

# Verify wheels parts
echo "Verificando partes de wheels.zip..."
for part in partaa partab partac partad partae partaf; do
    if [ ! -f "/tmp/src/lib/wheels.zip.$part" ]; then
        echo "Missing wheels part: $part"
        exit 1
    fi
done

# Combine wheels parts
echo "Combinando partes de wheels.zip..."
cat /tmp/src/lib/wheels.zip.part* > /tmp/wheels.zip

# Validate wheels zip
echo "Validando wheels.zip..."
if ! file /tmp/wheels.zip | grep -q 'Zip archive'; then
    echo "Invalid wheels zip file"
    exit 1
fi

# List wheels contents
echo "Listando contenido de wheels.zip..."
python3 - <<EOF
import zipfile
with zipfile.ZipFile('/tmp/wheels.zip', 'r') as zip_ref:
    for file in zip_ref.namelist():
        print(file)
EOF

# Extract wheels
echo "Descomprimiendo wheels.zip con Python..."
python3 - <<EOF
import zipfile
import os
os.makedirs('/tmp/wheels', exist_ok=True)
with zipfile.ZipFile('/tmp/wheels.zip', 'r') as zip_ref:
    zip_ref.extractall('/tmp/wheels')
EOF

# Verify extracted wheels
echo "Verificando contenido extraÃ­do en /tmp/wheels..."
ls -laR /tmp/wheels

# Handle nested wheels directory
if [ -d /tmp/wheels/wheels ]; then
    echo "Estructura anidada detectada, moviendo archivos..."
    mv /tmp/wheels/wheels/* /tmp/wheels/
    rmdir /tmp/wheels/wheels
fi

# Verify wheels directory
echo "Verificando directorio de wheels..."
ls -lh /tmp/wheels

# Remove conflicting typing_extensions version
if [ -f /tmp/wheels/typing_extensions-4.12.2-py3-none-any.whl ]; then
    echo "Removing typing_extensions-4.12.2 to avoid conflict with 4.14.0..."
    rm /tmp/wheels/typing_extensions-4.12.2-py3-none-any.whl
fi

# Install dependencies from wheels
echo "Instalando dependencias desde /tmp/wheels..."
pip install --no-cache-dir --no-index --verbose /tmp/wheels/*.whl || { echo "Error installing wheels"; exit 1; }

# Compile googlenet.so
echo "Compilando googlenet.so..."
g++ -shared -fPIC -o googlenet.so main.cpp \
    -I/opt/app-root/lib64/python3.12/site-packages/pybind11/include \
    -I/usr/include/python3.12 \
    -I/tmp/libtorch/libtorch/include \
    -I/tmp/libtorch/libtorch/include/torch/csrc/api/include \
    -L/tmp/libtorch/libtorch/lib \
    -ltorch -ltorch_cpu -lc10 \
    -std=c++17 \
    -Wl,-rpath,/opt/app-root/src/libtorch/lib || { echo "Error compiling googlenet.so"; exit 1; }

# Move compiled output to appropriate location
mv googlenet.so /opt/app-root/src/

# Set permissions for /opt/app-root/src
chown -R 1001:0 /opt/app-root/src
chmod -R g+rw /opt/app-root/src

# Clean up temporary files
rm -rf /tmp/libtorch /tmp/wheels /tmp/libtorch-cxx11-abi-shared-with-deps-2.4.1+cpu.zip /tmp/wheels.zip

echo "Assemble completado exitosamente."
