#!/bin/bash
set -e  # Exit on error
set -x  # Enable debug output

# Version 2.17
# Directorio de trabajo
cd /tmp/src

# Verificar si g++, python3 y file están instalados
if ! command -v g++ &> /dev/null; then
    echo "Error: g++ no está instalado"
    exit 1
fi
if ! command -v python3 &> /dev/null; then
    echo "Error: python3 no está instalado"
    exit 1
fi
if ! command -v file &> /dev/null; then
    echo "Error: file no está instalado"
    exit 1
fi

# Crear directorios temporales
mkdir -p /tmp/libtorch /tmp/wheels

# Verificar partes de libtorch
echo "Verificando partes de libtorch-cxx11-abi-shared-with-deps-2.4.1+cpu.zip..."
for part in partaa partab partac partad partae; do
    if [ ! -f "/tmp/src/lib/libtorch-cxx11-abi-shared-with-deps-2.4.1+cpu.zip.$part" ]; then
        echo "Error: libtorch-cxx11-abi-shared-with-deps-2.4.1+cpu.zip.$part no encontrado"
        ls -la /tmp/src/lib
        exit 1
    fi
done

# Combinar partes de libtorch
echo "Combinando partes de libtorch-cxx11-abi-shared-with-deps-2.4.1+cpu.zip..."
cat /tmp/src/lib/libtorch-cxx11-abi-shared-with-deps-2.4.1+cpu.zip.part* > /tmp/libtorch-cxx11-abi-shared-with-deps-2.4.1+cpu.zip || { echo "Error: No se pudo combinar libtorch-cxx11-abi-shared-with-deps-2.4.1+cpu.zip"; exit 1; }

# Validar que libtorch-cxx11-abi-shared-with-deps-2.4.1+cpu.zip es un archivo zip
echo "Validando libtorch-cxx11-abi-shared-with-deps-2.4.1+cpu.zip..."
if ! file /tmp/libtorch-cxx11-abi-shared-with-deps-2.4.1+cpu.zip | grep -q "Zip archive"; then
    echo "Error: libtorch-cxx11-abi-shared-with-deps-2.4.1+cpu.zip no es un archivo zip válido"
    cat /tmp/libtorch-cxx11-abi-shared-with-deps-2.4.1+cpu.zip | head -n 10
    exit 1
fi

# Listar contenido del zip para depuración
echo "Listando contenido de libtorch-cxx11-abi-shared-with-deps-2.4.1+cpu.zip..."
python3 - <<EOF
import zipfile
with zipfile.ZipFile('/tmp/libtorch-cxx11-abi-shared-with-deps-2.4.1+cpu.zip', 'r') as zip_ref:
    for file in zip_ref.namelist():
        print(file)
EOF

# Descomprimir libtorch-cxx11-abi-shared-with-deps-2.4.1+cpu.zip usando Python
echo "Descomprimiendo libtorch-cxx11-abi-shared-with-deps-2.4.1+cpu.zip con Python..."
python3 - <<EOF || { echo "Error: No se pudo descomprimir libtorch-cxx11-abi-shared-with-deps-2.4.1+cpu.zip"; exit 1; }
import zipfile
import os
with zipfile.ZipFile('/tmp/libtorch-cxx11-abi-shared-with-deps-2.4.1+cpu.zip', 'r') as zip_ref:
    zip_ref.extractall('/tmp/libtorch')
os.remove('/tmp/libtorch-cxx11-abi-shared-with-deps-2.4.1+cpu.zip')
EOF

# Verificar contenido extraído
echo "Verificando contenido extraído en /tmp/libtorch..."
ls -laR /tmp/libtorch || { echo "Error: No se pudo listar /tmp/libtorch"; exit 1; }

# Ajustar estructura si está anidada
if [ -d "/tmp/libtorch/libtorch" ]; then
    echo "Estructura anidada detectada, moviendo archivos..."
    mv /tmp/libtorch/libtorch/* /tmp/libtorch/ || { echo "Error: No se pudo mover archivos anidados"; exit 1; }
    rmdir /tmp/libtorch/libtorch
fi

# Verificar libtorch
echo "Verificando contenido de libtorch..."
ls -lh /tmp/libtorch/lib /tmp/libtorch/include/torch || { echo "Error: No se pudo listar /tmp/libtorch/lib o /tmp/libtorch/include/torch"; exit 1; }
if [ ! -f "/tmp/libtorch/include/torch/script.h" ]; then
    echo "Error: torch/script.h no se encuentra en /tmp/libtorch/include/torch"
    ls -la /tmp/libtorch/include/torch
    exit 1
fi
if [ ! -f "/tmp/libtorch/lib/libtorch.so" ]; then
    echo "Error: libtorch.so no se encuentra en /tmp/libtorch/lib"
    ls -la /tmp/libtorch/lib
    exit 1
fi

# Verificar partes de wheels.zip
echo "Verificando partes de wheels.zip..."
for part in partaa partab partac partad partae partaf partag partah partai partaj partak partal partam partan partao partap partaq partar partas partat partau; do
    if [ ! -f "/tmp/src/lib/wheels.zip.$part" ]; then
        echo "Error: wheels.zip.$part no encontrado"
        ls -la /tmp/src/lib
        exit 1
    fi
done

# Combinar partes de wheels.zip
echo "Combinando partes de wheels.zip..."
cat /tmp/src/lib/wheels.zip.part* > /tmp/wheels.zip || { echo "Error: No se pudo combinar wheels.zip"; exit 1; }

# Validar que wheels.zip es un archivo zip
echo "Validando wheels.zip..."
if ! file /tmp/wheels.zip | grep -q "Zip archive"; then
    echo "Error: wheels.zip no es un archivo zip válido"
    cat /tmp/wheels.zip | head -n 10
    exit 1
fi

# Listar contenido del zip para depuración
echo "Listando contenido de wheels.zip..."
python3 - <<EOF
import zipfile
with zipfile.ZipFile('/tmp/wheels.zip', 'r') as zip_ref:
    for file in zip_ref.namelist():
        print(file)
EOF

# Descomprimir wheels.zip usando Python
echo "Descomprimiendo wheels.zip con Python..."
python3 - <<EOF || { echo "Error: No se pudo descomprimir wheels.zip"; exit 1; }
import zipfile
import os
with zipfile.ZipFile('/tmp/wheels.zip', 'r') as zip_ref:
    zip_ref.extractall('/tmp/wheels')
os.remove('/tmp/wheels.zip')
EOF

# Verificar contenido extraído
echo "Verificando contenido extraído en /tmp/wheels..."
ls -laR /tmp/wheels || { echo "Error: No se pudo listar /tmp/wheels"; exit 1; }

# Ajustar estructura si está anidada
if [ -d "/tmp/wheels/wheels" ]; then
    echo "Estructura anidada detectada, moviendo archivos..."
    mv /tmp/wheels/wheels/* /tmp/wheels/ || { echo "Error: No se pudo mover archivos anidados"; exit 1; }
    rmdir /tmp/wheels/wheels
fi

# Verificar wheels
echo "Verificando directorio de wheels..."
ls -lh /tmp/wheels || { echo "Error: No se pudo listar /tmp/wheels"; exit 1; }

# Remove duplicate typing_extensions to avoid conflicts
if ls /tmp/wheels/typing_extensions-4.12.2-py3-none-any.whl > /dev/null 2>&1; then
    echo "Removing typing_extensions-4.12.2 to avoid conflict with 4.14.0..."
    rm /tmp/wheels/typing_extensions-4.12.2-py3-none-any.whl
fi

# Instalar dependencias de Python desde los wheels
echo "Instalando dependencias desde /tmp/wheels..."
pip install --no-cache-dir --verbose /tmp/wheels/*.whl

# Compilar el módulo C++ usando libtorch
echo "Compilando googlenet.so..."
g++ -shared -fPIC -o googlenet.so main.cpp \
    -I/opt/app-root/lib64/python3.12/site-packages/pybind11/include \
    -I/tmp/libtorch/include \
    -I/tmp/libtorch/include/torch/csrc/api/include \
    -L/tmp/libtorch/lib \
    -ltorch -ltorch_cpu -lc10 \
    -std=c++17 \
    -Wl,-rpath,/opt/app-root/src/libtorch/lib

# Copiar los archivos necesarios al directorio de runtime
echo "Copiando archivos al directorio de runtime..."
mkdir -p /opt/app-root/src/libtorch
cp googlenet.so main.py /opt/app-root/src/
cp -r /tmp/libtorch/* /opt/app-root/src/libtorch/

# Configurar permisos
echo "Configurando permisos..."
chown -R 1001:0 /opt/app-root/src
chmod -R g+w /opt/app-root/src
chmod +x /opt/app-root/src/main.py
echo "Assemble completado exitosamente."
